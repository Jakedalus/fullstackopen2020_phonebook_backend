{"version":3,"sources":["services/persons.js","Person.js","PersonList.js","Filter.js","PersonForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","console","log","data","newPerson","post","person","delete","id","put","Person","deleteNumber","style","display","marginRight","name","number","onClick","PersonList","search","persons","filter","RegExp","test","map","key","Filter","handleSearch","value","onChange","PersonForm","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","successStyles","backgroundColor","color","border","borderRadius","fontSize","padding","errorStyles","Notification","message","App","useState","setPersons","setNewName","setNewNumber","setSearch","setMessage","useEffect","personService","initialPersons","event","target","preventDefault","includes","window","confirm","personToUpdate","find","p","updatedPerson","concat","setTimeout","catch","error","returnedPerson","userIsSure","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.957e8085.chunk.js","sourcesContent":["import axios from 'axios';\n// const baseUrl = 'http://localhost:3001/api/persons';\n// const baseUrl =\n// \t'https://murmuring-hollows-93696.herokuapp.com/api/persons';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n\treturn axios.get(baseUrl).then(response => {\n\t\tconsole.log('getAll:', response);\n\t\treturn response.data;\n\t});\n};\n\nconst createPerson = newPerson => {\n\treturn axios\n\t\t.post(baseUrl, newPerson)\n\t\t.then(response => response.data);\n};\n\nconst deletePerson = person => {\n\tconsole.log('deletePerson', person);\n\treturn axios\n\t\t.delete(`${baseUrl}/${person.id}`)\n\t\t.then(response => response.data);\n};\n\nconst updatePerson = person => {\n\tconsole.log('updatePerson', person);\n\treturn axios\n\t\t.put(`${baseUrl}/${person.id}`, person)\n\t\t.then(response => response.data);\n};\n\nexport default {\n\tgetAll,\n\tcreatePerson,\n\tdeletePerson,\n\tupdatePerson\n};\n","import React from 'react';\n\nconst Person = ({ person, deleteNumber }) => (\n\t<div>\n\t\t<p\n\t\t\tstyle={{\n\t\t\t\tdisplay     : 'inline-block',\n\t\t\t\tmarginRight : '10px'\n\t\t\t}}\n\t\t>\n\t\t\t{person.name}, {person.number}\n\t\t</p>\n\t\t<button onClick={() => deleteNumber(person)}>\n\t\t\tDelete\n\t\t</button>\n\t</div>\n);\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person';\n\nconst PersonList = ({ search, persons, deleteNumber }) => (\n\t<div>\n\t\t<h2>Numbers</h2>\n\t\t{persons\n\t\t\t.filter(person =>\n\t\t\t\tRegExp(search, 'i').test(person.name)\n\t\t\t)\n\t\t\t.map(person => (\n\t\t\t\t<Person\n\t\t\t\t\tkey={person.name}\n\t\t\t\t\tperson={person}\n\t\t\t\t\tdeleteNumber={deleteNumber}\n\t\t\t\t/>\n\t\t\t))}\n\t</div>\n);\n\nexport default PersonList;\n","import React from \"react\";\n\nconst Filter = ({ search, handleSearch }) => (\n  <div>\n    <h3>Search phonebook</h3>\n    <input value={search} onChange={handleSearch} />\n  </div>\n);\n\nexport default Filter;\n","import React from \"react\";\n\nconst PersonForm = ({\n  addName,\n  newName,\n  handleNameChange,\n  newNumber,\n  handleNumberChange,\n}) => (\n  <div>\n    <h3>Add a new entry</h3>\n    <form onSubmit={addName}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      {/* <div>debug: {newName}</div> */}\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  </div>\n);\n\nexport default PersonForm;\n","import React from 'react';\n\nconst successStyles = {\n\tbackgroundColor : 'lightgray',\n\tcolor           : 'green',\n\tborder          : '3px solid green',\n\tborderRadius    : 5,\n\tfontSize        : 26,\n\tpadding         : 10\n};\n\nconst errorStyles = {\n\tbackgroundColor : 'lightgray',\n\tcolor           : 'red',\n\tborder          : '3px solid red',\n\tborderRadius    : 5,\n\tfontSize        : 26,\n\tpadding         : 10\n};\n\nconst Notification = ({ message }) => {\n\tif (message === null) return null;\n\treturn (\n\t\t<div\n\t\t\tstyle={\n\t\t\t\tmessage.type === 'success' ? (\n\t\t\t\t\tsuccessStyles\n\t\t\t\t) : (\n\t\t\t\t\terrorStyles\n\t\t\t\t)\n\t\t\t}\n\t\t>\n\t\t\t{message.message}\n\t\t</div>\n\t);\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons';\nimport PersonList from './PersonList';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport Notification from './Notification';\n\nconst App = () => {\n\tconst [ persons, setPersons ] = useState([]);\n\tconst [ newName, setNewName ] = useState('');\n\tconst [ newNumber, setNewNumber ] = useState('');\n\tconst [ search, setSearch ] = useState('');\n\tconst [ message, setMessage ] = useState(null);\n\n\tuseEffect(() => {\n\t\tpersonService.getAll().then(initialPersons => {\n\t\t\tsetPersons(initialPersons);\n\t\t});\n\t}, []);\n\n\tconst addName = event => {\n\t\t// console.log('addName', newName, persons, persons.map(person => person.name).includes(newName));\n\t\tevent.preventDefault();\n\t\tif (newName !== '' && newNumber !== '') {\n\t\t\tif (\n\t\t\t\t// if person already exists, ask if user wants to Update\n\t\t\t\tpersons.map(person => person.name).includes(newName)\n\t\t\t) {\n\t\t\t\t// window.alert(\n\t\t\t\t// \t`${newName} is already added to phonebook`\n\t\t\t\t// );\n\t\t\t\tconst userWantsToUpdateNumber = window.confirm(\n\t\t\t\t\t`${newName} is already added to phonebook. Do you want to replace the old number with a new one?`\n\t\t\t\t);\n\n\t\t\t\tif (userWantsToUpdateNumber) {\n\t\t\t\t\tconst personToUpdate = persons.find(\n\t\t\t\t\t\tp => p.name === newName\n\t\t\t\t\t);\n\t\t\t\t\tpersonService\n\t\t\t\t\t\t.updatePerson({\n\t\t\t\t\t\t\t...personToUpdate,\n\t\t\t\t\t\t\tnumber : newNumber\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(updatedPerson => {\n\t\t\t\t\t\t\tconsole.log('updatedPerson', updatedPerson);\n\t\t\t\t\t\t\tsetPersons(\n\t\t\t\t\t\t\t\tpersons\n\t\t\t\t\t\t\t\t\t.filter(p => p.name !== newName)\n\t\t\t\t\t\t\t\t\t.concat(updatedPerson)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsetMessage({\n\t\t\t\t\t\t\t\tmessage : `${updatedPerson.name} was updated`,\n\t\t\t\t\t\t\t\ttype    : 'success'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tsetMessage(null);\n\t\t\t\t\t\t\t}, 5000);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tconsole.log('Error:', error);\n\t\t\t\t\t\t\tsetMessage({\n\t\t\t\t\t\t\t\tmessage : `${newName} has already been removed from the server`,\n\t\t\t\t\t\t\t\ttype    : 'error'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tsetMessage(null);\n\t\t\t\t\t\t\t}, 5000);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst newPerson = {\n\t\t\t\t\tname   : newName,\n\t\t\t\t\tnumber : newNumber\n\t\t\t\t};\n\n\t\t\t\tpersonService\n\t\t\t\t\t.createPerson(newPerson)\n\t\t\t\t\t.then(returnedPerson => {\n\t\t\t\t\t\tsetPersons(persons.concat(returnedPerson));\n\t\t\t\t\t\tsetMessage({\n\t\t\t\t\t\t\tmessage : `${returnedPerson.name} was added to the phonebook`,\n\t\t\t\t\t\t\ttype    : 'success'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tsetMessage(null);\n\t\t\t\t\t\t}, 5000);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tsetNewName('');\n\t\t\tsetNewNumber('');\n\t\t}\n\t};\n\n\tconst deleteNumber = person => {\n\t\tconst userIsSure = window.confirm(\n\t\t\t`Are you sure you want to delete ${person.name}?`\n\t\t);\n\n\t\tconsole.log('deleteNumber', person, userIsSure);\n\n\t\tif (userIsSure) {\n\t\t\tpersonService.deletePerson(person).then(response => {\n\t\t\t\t// console.log('Deleted', response);\n\t\t\t\tsetPersons(persons.filter(p => p.id !== person.id));\n\t\t\t\tsetMessage({\n\t\t\t\t\tmessage : `${person.name} was deleted from the phonebook`,\n\t\t\t\t\ttype    : 'success'\n\t\t\t\t});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetMessage(null);\n\t\t\t\t}, 5000);\n\t\t\t});\n\t\t}\n\t};\n\n\tconst handleNameChange = event => {\n\t\tsetNewName(event.target.value);\n\t};\n\n\tconst handleNumberChange = event => {\n\t\tsetNewNumber(event.target.value);\n\t};\n\n\tconst handleSearch = event => {\n\t\tsetSearch(event.target.value);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Phonebook</h2>\n\n\t\t\t<Notification message={message} />\n\n\t\t\t<Filter search={search} handleSearch={handleSearch} />\n\n\t\t\t<PersonForm\n\t\t\t\taddName={addName}\n\t\t\t\tnewName={newName}\n\t\t\t\thandleNameChange={handleNameChange}\n\t\t\t\tnewNumber={newNumber}\n\t\t\t\thandleNumberChange={handleNumberChange}\n\t\t\t/>\n\n\t\t\t<PersonList\n\t\t\t\tsearch={search}\n\t\t\t\tpersons={persons}\n\t\t\t\tdeleteNumber={deleteNumber}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}